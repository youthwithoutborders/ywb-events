// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model Person {
    id        Int      @id @default(autoincrement())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    // Required fields
    firstName          String
    preferredFirstName String?
    lastName           String?

    // Optional fields
    gender      Gender?
    pronouns    String?
    dateOfBirth String?

    phone           String?
    personalEmail   String?
    universityEmail String?
    companyEmail    String?
    address         String?

    // formAnswers FormAnswer[]
}

enum Gender {
    MALE
    FEMALE
    GENDER_DIVERSE
    PREFER_NOT_TO_SAY
}

// model Form {
//     id        Int      @id @default(autoincrement())
//     createdAt DateTime @default(now())
//     updatedAt DateTime @updatedAt

//     name String
//     type FormType

//     questions FormQuestion[]
// }

// enum FormType {
//     APPLICATION
//     INFORMATION
// }

// model FormQuestion {
//     id        Int      @id @default(autoincrement())
//     createdAt DateTime @default(now())
//     updatedAt DateTime @updatedAt

//     question    String
//     description String
//     type        QuestionType
//     options     String[]

//     form   Form @relation(fields: [formId], references: [id])
//     formId Int

//     answers FormAnswer[]
// }

// enum QuestionType {
//     SHORT_TEXT
//     PARAGRAPH
//     RADIO
//     CHECKBOX
//     DROPDOWN
//     DATE
//     TIME
//     PERSON_PRONOUNS
//     PERSON_GENDER
//     PERSON_DATE_OF_BIRTH
//     PERSON_PHONE
//     PERSON_PERSONAL_EMAIL
//     PERSON_UNIVERSITY_EMAIL
//     PERSON_OFFICIAL_EMAIL
//     PERSON_ADDRESS
// }

// model FormAnswer {
//     id        Int      @id @default(autoincrement())
//     createdAt DateTime @default(now())
//     updatedAt DateTime @updatedAt

//     answer String

//     person   Person @relation(fields: [personId], references: [id])
//     personId Int

//     question   FormQuestion @relation(fields: [questionId], references: [id])
//     questionId Int
// }

// Test stuff
model Post {
    id        Int      @id @default(autoincrement())
    name      String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    createdBy   User   @relation(fields: [createdById], references: [id])
    createdById String

    @@index([name])
}

// Necessary for Next auth
model Account {
    id                       String  @id @default(cuid())
    userId                   String
    type                     String
    provider                 String
    providerAccountId        String
    refresh_token            String?
    access_token             String?
    expires_at               Int?
    token_type               String?
    scope                    String?
    id_token                 String?
    session_state            String?
    user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
    refresh_token_expires_in Int?

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
    posts         Post[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}
